name: Push to Kubernetes

on:
    workflow_dispatch:
      inputs:
        new_namespace:
          description: 'New Namespace'
          type: boolean
          default: false
          required: true
        pull_image:
          description: 'Pull Image'
          type: boolean
          default: false
          required: true
        deploy_container:
          description: 'Deploy on Kubernetes'
          type: boolean
          default: false
          required: true

env:
    NAMESPACE: ${{ vars.NAMESPACE }}
    GIT_REGISTRY: ghcr.io
    GIT_REPO_OWNER: richardvanraes
    GIT_IMAGE_NAME: mlops-2.0
    GIT_SHA: ${{ github.sha }} # Set the SHA to use in the code

jobs:
  namespace:
    if: ${{ inputs.new_namespace 
      }}
    runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        # - uses: actions/checkout@v3
  
        # Create a new namespace
        - name: Create Namespace
          run: kubectl create namespace ${{ env.NAMESPACE }}
  
  pull:
    needs: [namespace]
    if: ${{
        always() &&
        (needs.namespace.result == 'success' || needs.namespace.result == 'skipped') &&
        inputs.pull_image
      }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 7
      - run: echo $SHA
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
      - run: echo $SHA
        env:
          SHA: ${{ env.SHA }}
      # Login to GHCR
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GIT_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN_GITHUB }}  

      # Pull a Docker image
      - name: Pull Docker image
        run: docker pull ${{ env.GIT_REGISTRY }}/${{ env.GIT_REPO_OWNER }}/${{ env.GIT_IMAGE_NAME }}:sha-${{ steps.short-sha.outputs.sha }}
    
  deploy:
    needs: [namespace,pull]
    if: ${{
        always() &&
        (needs.namespace.result == 'success' || needs.namespace.result == 'skipped') &&
        (needs.pull.result == 'success' || needs.pull.result == 'skipped') &&
        inputs.deploy_container
      }} 
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
         # A KubeCTL action which will apply a Kubernetes object to your cluster
      - name: check files
        run: ls -la
        
      - name: Run KubeCtl
        run: kubectl create -f deployment.yml -n ${{ env.NAMESPACE }}